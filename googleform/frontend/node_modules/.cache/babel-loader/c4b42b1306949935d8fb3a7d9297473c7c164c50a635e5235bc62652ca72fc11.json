{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nexport const SchemaTypes = {\n  string: (required = false, message = \"This is a required question\") => ({\n    type: \"string\",\n    required,\n    message\n  }),\n  number: (required = false, message = \"This is a required question\") => ({\n    type: \"number\",\n    required,\n    message\n  }),\n  boolean: (required = false, message = \"This is a required question\") => ({\n    type: \"boolean\",\n    required,\n    message\n  })\n};\nconst formatValue = (value, type) => {\n  try {\n    if (type !== \"string\") {\n      value = JSON.parse(value);\n    }\n  } catch (error) {\n    value = value;\n  }\n  return value;\n};\nconst formatData = (schema, data) => {\n  const formatted = {};\n  Object.keys(data).forEach(key => {\n    const schemaTypes = schema[key];\n    const value = formatValue(data[key], schemaTypes.type);\n    formatted[key] = value;\n  });\n  return formatted;\n};\nconst validateData = (schema, data) => {\n  const errors = {};\n  Object.keys(data).forEach(key => {\n    const schemaTypes = schema[key];\n    const value = formatValue(data[key], schemaTypes.type);\n    switch (true) {\n      case typeof value !== schemaTypes.type:\n        errors[key] = `Expected ${schemaTypes.type} for ${key} but received type ${typeof value}`;\n        break;\n      case schemaTypes.required && (value === null || value === undefined || value === \"\"):\n        errors[key] = schemaTypes.message || `${key} is Required!`;\n        break;\n      default:\n        break;\n    }\n  });\n  return errors;\n};\nexport const useForm = (schema, data) => {\n  _s();\n  const [form, setForm] = useState(data);\n  const [errors, setErrors] = useState({});\n  const register = name => {\n    const onBlur = e => {\n      setErrors(prevState => ({\n        ...prevState,\n        [name]: form[name]\n      }));\n    };\n    const onChange = value => {\n      setForm(prevState => ({\n        ...prevState,\n        [name]: value\n      }));\n      setErrors(prevState => ({\n        ...prevState,\n        [name]: value\n      }));\n    };\n    const handleSetErrors = (name, value) => {\n      setErrors(prevState => ({\n        ...prevState,\n        [name]: form[name]\n      }));\n    };\n    return {\n      name,\n      onChange,\n      onBlur,\n      value: form[name],\n      errors: validateData(schema, errors)\n    };\n  };\n  const format = () => formatData(schema, form);\n  const handleSubmit = onSubmit => e => {\n    e.preventDefault();\n    const errorsMap = validateData(schema, form);\n    const errorsList = Object.keys(errorsMap).length;\n    if (errorsList) {\n      set;\n    } else {\n      onSubmit(format());\n    }\n  };\n  return {\n    register,\n    handleSubmit\n  };\n};\n_s(useForm, \"mdOA/P1y63azIkC5n4LopNAXFbs=\");","map":{"version":3,"names":["useState","SchemaTypes","string","required","message","type","number","boolean","formatValue","value","JSON","parse","error","formatData","schema","data","formatted","Object","keys","forEach","key","schemaTypes","validateData","errors","undefined","useForm","_s","form","setForm","setErrors","register","name","onBlur","e","prevState","onChange","handleSetErrors","format","handleSubmit","onSubmit","preventDefault","errorsMap","errorsList","length","set"],"sources":["/Users/sweta/Desktop/googleform/frontend/src/utils.js"],"sourcesContent":["import { useState } from \"react\";\n\nexport const SchemaTypes = {\n  string: (required = false, message = \"This is a required question\") => ({\n    type: \"string\",\n    required,\n    message,\n  }),\n  number: (required = false, message = \"This is a required question\") => ({\n    type: \"number\",\n    required,\n    message,\n  }),\n  boolean: (required = false, message = \"This is a required question\") => ({\n    type: \"boolean\",\n    required,\n    message,\n  }),\n};\n\nconst formatValue = (value, type) => {\n  try {\n    if (type !== \"string\") {\n      value = JSON.parse(value);\n    }\n  } catch (error) {\n    value = value;\n  }\n  return value;\n};\n\nconst formatData = (schema, data) => {\n  const formatted = {};\n  Object.keys(data).forEach((key) => {\n    const schemaTypes = schema[key];\n    const value = formatValue(data[key], schemaTypes.type);\n    formatted[key] = value;\n  });\n  return formatted;\n};\n\nconst validateData = (schema, data) => {\n  const errors = {};\n  Object.keys(data).forEach((key) => {\n    const schemaTypes = schema[key];\n    const value = formatValue(data[key], schemaTypes.type);\n    switch (true) {\n      case typeof value !== schemaTypes.type:\n        errors[key] = `Expected ${\n          schemaTypes.type\n        } for ${key} but received type ${typeof value}`;\n        break;\n      case schemaTypes.required &&\n        (value === null || value === undefined || value === \"\"):\n        errors[key] = schemaTypes.message || `${key} is Required!`;\n        break;\n      default:\n        break;\n    }\n  });\n\n  return errors;\n};\n\nexport const useForm = (schema, data) => {\n  const [form, setForm] = useState(data);\n  const [errors, setErrors] = useState({});\n\n  const register = (name) => {\n    const onBlur = (e) => {\n      setErrors((prevState) => ({ ...prevState, [name]: form[name] }));\n    };\n\n    const onChange = (value) => {\n      setForm((prevState) => ({ ...prevState, [name]: value }));\n      setErrors((prevState) => ({ ...prevState, [name]: value }));\n    };\n\n    const handleSetErrors = (name, value, ) => {\n      setErrors((prevState) => ({ ...prevState, [name]: form[name] }));\n\n    }\n    return {\n      name,\n      onChange,\n      onBlur,\n      value: form[name],\n      errors: validateData(schema, errors),\n    };\n  };\n\n  const format = () => formatData(schema, form);\n\n  const handleSubmit = (onSubmit) => (e) => {\n    e.preventDefault();\n    const errorsMap = validateData(schema, form);\n    const errorsList = Object.keys(errorsMap).length;\n\n    if (errorsList) {\n      set\n    } else {\n      onSubmit(format());\n    }\n  };\n\n  return {\n    register,\n    handleSubmit,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}