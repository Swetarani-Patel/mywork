{"ast":null,"code":"export const SchemaTypes = {\n  string: (required = false, message) => ({\n    type: \"string\",\n    required,\n    message\n  }),\n  number: (required = false, message) => ({\n    type: \"number\",\n    required,\n    message\n  }),\n  boolean: (required = false, message) => ({\n    type: \"boolean\",\n    required,\n    message\n  })\n};\nconst formatValue = (value, type) => {\n  try {\n    if (type !== \"string\") {\n      value = JSON.parse(value);\n    }\n  } catch (error) {\n    value = value;\n  }\n  return value;\n};\nconst formatData = (schema, data) => {\n  const formatted = {};\n  Object.keys(data).forEach(key => {\n    const schemaTypes = schema[key];\n    const value = formatValue(data[key], schemaTypes.type);\n    formatted[key] = value;\n  });\n  return formatted;\n};\nconst validateData = (schema, data) => {\n  const errors = {};\n  Object.keys(data).forEach(key => {\n    const schemaTypes = schema[key];\n    const value = formatValue(data[key], schemaTypes.type);\n    switch (true) {\n      case typeof value !== schemaTypes.type:\n        errors[key] = `Expected ${schemaTypes.type} for ${key} but received type ${typeof value}`;\n        break;\n      case schemaTypes.required && (value === null || value === undefined || value === \"\"):\n        errors[key] = schemaTypes.message || `${key} is Required!`;\n        break;\n      default:\n        break;\n    }\n  });\n  return errors;\n};\nexport const resolver = (schema, data) => {\n  const validate = () => validateData(schema, data);\n  const format = () => formatData(schema, data);\n  return {\n    validate,\n    format\n  };\n};","map":{"version":3,"names":["SchemaTypes","string","required","message","type","number","boolean","formatValue","value","JSON","parse","error","formatData","schema","data","formatted","Object","keys","forEach","key","schemaTypes","validateData","errors","undefined","resolver","validate","format"],"sources":["/Users/sweta/Desktop/googleform/frontend/src/utils.js"],"sourcesContent":["export const SchemaTypes = {\n  string: (required = false, message) => ({\n    type: \"string\",\n    required,\n    message,\n  }),\n  number: (required = false, message) => ({\n    type: \"number\",\n    required,\n    message,\n  }),\n  boolean: (required = false, message) => ({\n    type: \"boolean\",\n    required,\n    message,\n  }),\n};\n\nconst formatValue = (value, type) => {\n  try {\n    if (type !== \"string\") {\n      value = JSON.parse(value);\n    }\n  } catch (error) {\n    value = value;\n  }\n  return value;\n};\n\nconst formatData = (schema, data) => {\n  const formatted = {};\n  Object.keys(data).forEach((key) => {\n    const schemaTypes = schema[key];\n    const value = formatValue(data[key], schemaTypes.type);\n    formatted[key] = value;\n  });\n  return formatted;\n};\n\nconst validateData = (schema, data) => {\n  const errors = {};\n  Object.keys(data).forEach((key) => {\n    const schemaTypes = schema[key];\n    const value = formatValue(data[key], schemaTypes.type);\n    switch (true) {\n      case typeof value !== schemaTypes.type:\n        errors[key] = `Expected ${\n          schemaTypes.type\n        } for ${key} but received type ${typeof value}`;\n        break;\n      case schemaTypes.required &&\n        (value === null || value === undefined || value === \"\"):\n        errors[key] = schemaTypes.message || `${key} is Required!`;\n        break;\n      default:\n        break;\n    }\n  });\n\n  return errors;\n};\n\nexport const resolver = (schema, data) => {\n  const validate = () => validateData(schema, data);\n\n  const format = () => formatData(schema, data);\n\n  return {\n    validate,\n    format,\n  };\n};\n"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG;EACzBC,MAAM,EAAEA,CAACC,QAAQ,GAAG,KAAK,EAAEC,OAAO,MAAM;IACtCC,IAAI,EAAE,QAAQ;IACdF,QAAQ;IACRC;EACF,CAAC,CAAC;EACFE,MAAM,EAAEA,CAACH,QAAQ,GAAG,KAAK,EAAEC,OAAO,MAAM;IACtCC,IAAI,EAAE,QAAQ;IACdF,QAAQ;IACRC;EACF,CAAC,CAAC;EACFG,OAAO,EAAEA,CAACJ,QAAQ,GAAG,KAAK,EAAEC,OAAO,MAAM;IACvCC,IAAI,EAAE,SAAS;IACfF,QAAQ;IACRC;EACF,CAAC;AACH,CAAC;AAED,MAAMI,WAAW,GAAGA,CAACC,KAAK,EAAEJ,IAAI,KAAK;EACnC,IAAI;IACF,IAAIA,IAAI,KAAK,QAAQ,EAAE;MACrBI,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACF,KAAK,CAAC;IAC3B;EACF,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdH,KAAK,GAAGA,KAAK;EACf;EACA,OAAOA,KAAK;AACd,CAAC;AAED,MAAMI,UAAU,GAAGA,CAACC,MAAM,EAAEC,IAAI,KAAK;EACnC,MAAMC,SAAS,GAAG,CAAC,CAAC;EACpBC,MAAM,CAACC,IAAI,CAACH,IAAI,CAAC,CAACI,OAAO,CAAEC,GAAG,IAAK;IACjC,MAAMC,WAAW,GAAGP,MAAM,CAACM,GAAG,CAAC;IAC/B,MAAMX,KAAK,GAAGD,WAAW,CAACO,IAAI,CAACK,GAAG,CAAC,EAAEC,WAAW,CAAChB,IAAI,CAAC;IACtDW,SAAS,CAACI,GAAG,CAAC,GAAGX,KAAK;EACxB,CAAC,CAAC;EACF,OAAOO,SAAS;AAClB,CAAC;AAED,MAAMM,YAAY,GAAGA,CAACR,MAAM,EAAEC,IAAI,KAAK;EACrC,MAAMQ,MAAM,GAAG,CAAC,CAAC;EACjBN,MAAM,CAACC,IAAI,CAACH,IAAI,CAAC,CAACI,OAAO,CAAEC,GAAG,IAAK;IACjC,MAAMC,WAAW,GAAGP,MAAM,CAACM,GAAG,CAAC;IAC/B,MAAMX,KAAK,GAAGD,WAAW,CAACO,IAAI,CAACK,GAAG,CAAC,EAAEC,WAAW,CAAChB,IAAI,CAAC;IACtD,QAAQ,IAAI;MACV,KAAK,OAAOI,KAAK,KAAKY,WAAW,CAAChB,IAAI;QACpCkB,MAAM,CAACH,GAAG,CAAC,GAAI,YACbC,WAAW,CAAChB,IACb,QAAOe,GAAI,sBAAqB,OAAOX,KAAM,EAAC;QAC/C;MACF,KAAKY,WAAW,CAAClB,QAAQ,KACtBM,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKe,SAAS,IAAIf,KAAK,KAAK,EAAE,CAAC;QACvDc,MAAM,CAACH,GAAG,CAAC,GAAGC,WAAW,CAACjB,OAAO,IAAK,GAAEgB,GAAI,eAAc;QAC1D;MACF;QACE;IACJ;EACF,CAAC,CAAC;EAEF,OAAOG,MAAM;AACf,CAAC;AAED,OAAO,MAAME,QAAQ,GAAGA,CAACX,MAAM,EAAEC,IAAI,KAAK;EACxC,MAAMW,QAAQ,GAAGA,CAAA,KAAMJ,YAAY,CAACR,MAAM,EAAEC,IAAI,CAAC;EAEjD,MAAMY,MAAM,GAAGA,CAAA,KAAMd,UAAU,CAACC,MAAM,EAAEC,IAAI,CAAC;EAE7C,OAAO;IACLW,QAAQ;IACRC;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}