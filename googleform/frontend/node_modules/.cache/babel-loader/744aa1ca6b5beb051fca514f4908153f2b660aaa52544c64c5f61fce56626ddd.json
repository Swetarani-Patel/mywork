{"ast":null,"code":"export const SchemaTypes = {\n  string: (required = false, message) => ({\n    type: \"string\",\n    required,\n    message\n  }),\n  number: (required = false, message) => ({\n    type: \"number\",\n    required,\n    message\n  }),\n  boolean: (required = false, message) => ({\n    type: \"boolean\",\n    required,\n    message\n  })\n};\nexport const formatValue = value => {};\nexport const validateData = (schema, data) => {\n  const errors = [];\n  Object.keys(data).forEach(key => {\n    const schemaTypes = schema[key];\n    let value = data[key];\n    try {\n      value = JSON.parse(value);\n    } catch (error) {\n      value = value;\n    }\n    if (typeof value !== schemaTypes.type) {\n      errors.push({\n        [key]: `Expected ${schemaTypes.type} for ${key} but received ${typeof value}`\n      });\n    } else if (schemaTypes.required && (value === null || value === undefined || value === \"\")) {\n      errors.push({\n        [key]: schemaTypes.message || `${key} is Required!`\n      });\n    }\n  });\n  return errors;\n};","map":{"version":3,"names":["SchemaTypes","string","required","message","type","number","boolean","formatValue","value","validateData","schema","data","errors","Object","keys","forEach","key","schemaTypes","JSON","parse","error","push","undefined"],"sources":["/Users/sweta/Desktop/googleform/frontend/src/utils.js"],"sourcesContent":["export const SchemaTypes = {\n  string: (required = false, message) => ({\n    type: \"string\",\n    required,\n    message,\n  }),\n  number: (required = false, message) => ({\n    type: \"number\",\n    required,\n    message,\n  }),\n  boolean: (required = false, message) => ({\n    type: \"boolean\",\n    required,\n    message,\n  }),\n};\n\nexport const formatValue = (value) => {\n\n}\n\nexport const validateData = (schema, data) => {\n  const errors = [];\n  Object.keys(data).forEach((key) => {\n    const schemaTypes = schema[key];\n    let value = data[key];\n\n    try {\n      value = JSON.parse(value);\n    } catch (error) {\n      value = value;\n    }\n\n    if (typeof value !== schemaTypes.type) {\n      errors.push({\n        [key]: `Expected ${\n          schemaTypes.type\n        } for ${key} but received ${typeof value}`,\n      });\n    } else if (\n      schemaTypes.required &&\n      (value === null || value === undefined || value === \"\")\n    ) {\n      errors.push({\n        [key]: schemaTypes.message || `${key} is Required!`,\n      });\n    }\n  });\n  return errors;\n};\n"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG;EACzBC,MAAM,EAAEA,CAACC,QAAQ,GAAG,KAAK,EAAEC,OAAO,MAAM;IACtCC,IAAI,EAAE,QAAQ;IACdF,QAAQ;IACRC;EACF,CAAC,CAAC;EACFE,MAAM,EAAEA,CAACH,QAAQ,GAAG,KAAK,EAAEC,OAAO,MAAM;IACtCC,IAAI,EAAE,QAAQ;IACdF,QAAQ;IACRC;EACF,CAAC,CAAC;EACFG,OAAO,EAAEA,CAACJ,QAAQ,GAAG,KAAK,EAAEC,OAAO,MAAM;IACvCC,IAAI,EAAE,SAAS;IACfF,QAAQ;IACRC;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMI,WAAW,GAAIC,KAAK,IAAK,CAEtC,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGA,CAACC,MAAM,EAAEC,IAAI,KAAK;EAC5C,MAAMC,MAAM,GAAG,EAAE;EACjBC,MAAM,CAACC,IAAI,CAACH,IAAI,CAAC,CAACI,OAAO,CAAEC,GAAG,IAAK;IACjC,MAAMC,WAAW,GAAGP,MAAM,CAACM,GAAG,CAAC;IAC/B,IAAIR,KAAK,GAAGG,IAAI,CAACK,GAAG,CAAC;IAErB,IAAI;MACFR,KAAK,GAAGU,IAAI,CAACC,KAAK,CAACX,KAAK,CAAC;IAC3B,CAAC,CAAC,OAAOY,KAAK,EAAE;MACdZ,KAAK,GAAGA,KAAK;IACf;IAEA,IAAI,OAAOA,KAAK,KAAKS,WAAW,CAACb,IAAI,EAAE;MACrCQ,MAAM,CAACS,IAAI,CAAC;QACV,CAACL,GAAG,GAAI,YACNC,WAAW,CAACb,IACb,QAAOY,GAAI,iBAAgB,OAAOR,KAAM;MAC3C,CAAC,CAAC;IACJ,CAAC,MAAM,IACLS,WAAW,CAACf,QAAQ,KACnBM,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKc,SAAS,IAAId,KAAK,KAAK,EAAE,CAAC,EACvD;MACAI,MAAM,CAACS,IAAI,CAAC;QACV,CAACL,GAAG,GAAGC,WAAW,CAACd,OAAO,IAAK,GAAEa,GAAI;MACvC,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EACF,OAAOJ,MAAM;AACf,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}