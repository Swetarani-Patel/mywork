{"ast":null,"code":"const types = {};\nexport const SchemaTypes = {\n  string: \"string\",\n  number: \"number\",\n  boolean: \"boolean\"\n};\nconst validateData = (schema, data) => {\n  const errors = [];\n  Object.keys(data).forEach(key => {\n    const type = schema[key];\n    let value = data[key];\n    try {\n      value = JSON.parse(value);\n    } catch (error) {\n      value = value;\n    }\n    if (typeof value !== type) {\n      errors.push({\n        [key]: `Expected ${type} for ${key} but received ${typeof value}`\n      });\n    }\n  });\n};","map":{"version":3,"names":["types","SchemaTypes","string","number","boolean","validateData","schema","data","errors","Object","keys","forEach","key","type","value","JSON","parse","error","push"],"sources":["/Users/sweta/Desktop/googleform/frontend/src/utils.js"],"sourcesContent":["\nconst types = {\n        \n};\n\nexport const SchemaTypes = {\n\n  string: \"string\",\n  number: \"number\",\n  boolean: \"boolean\",\n};\n\nconst validateData = (schema, data) => {\n  const errors = [];\n  Object.keys(data).forEach((key) => {\n    const type = schema[key];\n    let value = data[key];\n\n    try {\n      value = JSON.parse(value);\n    } catch (error) {\n      value = value;\n    }\n\n    if (typeof value !== type) {\n      errors.push({\n        [key]: `Expected ${type} for ${key} but received ${typeof value}`,\n      });\n    }\n  });\n};\n"],"mappings":"AACA,MAAMA,KAAK,GAAG,CAEd,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG;EAEzBC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,OAAO,EAAE;AACX,CAAC;AAED,MAAMC,YAAY,GAAGA,CAACC,MAAM,EAAEC,IAAI,KAAK;EACrC,MAAMC,MAAM,GAAG,EAAE;EACjBC,MAAM,CAACC,IAAI,CAACH,IAAI,CAAC,CAACI,OAAO,CAAEC,GAAG,IAAK;IACjC,MAAMC,IAAI,GAAGP,MAAM,CAACM,GAAG,CAAC;IACxB,IAAIE,KAAK,GAAGP,IAAI,CAACK,GAAG,CAAC;IAErB,IAAI;MACFE,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACF,KAAK,CAAC;IAC3B,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdH,KAAK,GAAGA,KAAK;IACf;IAEA,IAAI,OAAOA,KAAK,KAAKD,IAAI,EAAE;MACzBL,MAAM,CAACU,IAAI,CAAC;QACV,CAACN,GAAG,GAAI,YAAWC,IAAK,QAAOD,GAAI,iBAAgB,OAAOE,KAAM;MAClE,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}